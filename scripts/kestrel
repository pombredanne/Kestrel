#!/usr/bin/env python

"""
    Kestrel: An XMPP-based Job Scheduler
    Copyright (C) 2011 Lance Stout
    This file is part of Kestrel.

    See the file LICENSE for copying permission.
"""

import os
import sys
import logging

import optparse

from kestrel import __version__, load_config, Worker, Manager, Client

def hack_log() :
    for i in logging.Logger.manager.loggerDict.keys(): 
        ll = logging.getLogger(i)
        l = ll.level
        if (l != 1) :
            print "fixing log of %s" % i
            ll.setLevel(1)


def start_worker(conf, args):
    xmpp = Worker(conf['worker']['xmpp']['jid'],
                  conf['worker']['xmpp']['password'],
                  conf['worker'])
    if xmpp.connect():
        xmpp.process(threaded=False)
    else:
        logging.log(logging.CRITICAL, "Unable to connect.")

def start_manager(conf, args):
#    print conf['manager']['xmpp']
    hack_log()
    print ("jid", conf['manager']['xmpp']['jid'], "pass",     conf['manager']['xmpp']['password'],                   conf['manager']['xmpp']['server'],                   conf['manager']['xmpp']['port'],                   conf['manager'])
    logging.log(logging.CRITICAL, "starting1")
    logging.log(logging.CRITICAL, "starting1")
    xmpp = Manager(conf['manager']['xmpp']['jid'],
                   conf['manager']['xmpp']['password'],
                   conf['manager']['xmpp']['server'],
                   conf['manager']['xmpp']['port'],
                   conf['manager'])
    logging.log(logging.CRITICAL, "starting, going to connect")

    hack_log()


    if xmpp.connect():
        logging.log(logging.CRITICAL, "connected, going to process")
        #for i in Logger.manager.loggerDict.keys(): print(getLogger(i).setLevel())
        xmpp.process(threaded=False)
        logging.log(logging.CRITICAL, "after process")
    else:
        logging.log(logging.CRITICAL, "Unable to connect.")

def start_submit(conf, args):
    xmpp = Client(conf['client']['xmpp']['jid'],
                  conf['client']['xmpp']['password'],
                  conf['client'])

    def run_submit(event):
        xmpp.submit_job(file=args[0])

    if not args:
        logging.error("Missing job file.")
        sys.exit(0)
    hack_log()
    xmpp.single_command = True
    xmpp.add_event_handler('kestrel_start', run_submit)

    if xmpp.connect():
        xmpp.process(threaded=False)
    else:
        logging.log(logging.CRITICAL, "Unable to connect.")

def start_cancel(conf, args):
    xmpp = Client(conf['client']['xmpp']['jid'],
                  conf['client']['xmpp']['password'],
                  conf['client'])

    def run_cancel(event):
        xmpp.cancel_jobs(args)

    if not args:
        logging.error("Missing job ID.")
        sys.exit(0)

    xmpp.single_command = True
    xmpp.add_event_handler('kestrel_start', run_cancel)
    hack_log()
    if xmpp.connect():
        xmpp.process(threaded=False)
    else:
        logging.log(logging.CRITICAL, "Unable to connect.")

def start_status(conf, args):
    xmpp = Client(conf['client']['xmpp']['jid'],
                  conf['client']['xmpp']['password'],
                  conf['client'])

    def run_status(event):
        xmpp.pool_status()

    xmpp.single_command = True
    xmpp.add_event_handler('kestrel_start', run_status)
    hack_log()
    if xmpp.connect():
        xmpp.process(threaded=False)
    else:
        logging.log(logging.CRITICAL, "Unable to connect.")


if __name__ == '__main__':
    opts = optparse.OptionParser(
        usage="Usage: %prog [options] worker|manager|submit [<job_file>]",
        version='%%prog %s' % __version__)

    opts.add_option('-q','--quiet',
                    help='set logging to ERROR',
                    action='store_const',
                    dest='loglevel',
                    const=logging.ERROR,
                    default=logging.INFO)
    opts.add_option('-d','--debug',
                    help='set logging to DEBUG',
                    action='store_const',
                    dest='loglevel',
                    const=logging.DEBUG,
                    default=logging.INFO)

    opts.add_option('-v','--verbose',
                    help='set logging to COMM',
                    action='store_const',
                    dest='loglevel',
                    const=5,
                    default=logging.INFO)
    opts.add_option('-c', '--config',
                    help=('Alternate location for config file.'),
                    dest='configfile',
                    metavar='FILE',
                    default='~/.kestrelrc')

    (options, args) = opts.parse_args()

    if len(args) < 1:
        opts.print_help()
        sys.exit(1)

    conf = load_config(options.configfile)

    logging.basicConfig()
    log = logging.getLogger(__name__)
    log.setLevel(1) # low level
    log.debug("test2")
    hack_log()
#print "get logger"
#print "set logging"
#    logging.basicConfig(level=options.loglevel, 
#                        format='%(asctime)s %(levelname)-8s %(message)s')

    log.debug("logging should work now")
    logging.log(logging.DEBUG, "logging for debugging should work now.")

    handlers = {'worker': start_worker,
                'manager': start_manager,
                'submit': start_submit,
                'cancel': start_cancel,
                'status': start_status}
    handler = handlers.get(args[0], start_worker)
    handler(conf, args[1:])
